package net.mlcoder.unicode.category;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.List;


public class MathOperator implements UniCode {
    public static final List<UniCode> symbols = new ArrayList<>();

    public final String desc;
    public final int codePoint;
    public final String chars;
    public final String generalCategory;
    public final int combiningClass;

    @Nullable
    public final String latex;

    @Override
    public String desc() {
        return desc;
    }

    @Override
    public int codePoint() {
        return codePoint;
    }

    @Override
    public String chars() {
        return chars;
    }

    @Override
    public String generalCategory() {
        return generalCategory;
    }

    @Override
    public int combiningClass() {
        return combiningClass;
    }

    @Override @Nullable
    public String latex() {
        return latex;
    }

    MathOperator(String desc, int codePoint, String chars, String generalCategory, int combiningClass) {
        this(desc, codePoint, chars, generalCategory, combiningClass, null);
    }

    MathOperator(String desc, int codePoint, String chars, String generalCategory, int combiningClass, String latex) {
        this.desc = desc;
        this.codePoint = codePoint;
        this.generalCategory = generalCategory;
        this.combiningClass = combiningClass;
        this.chars = chars;
        this.latex = latex;
    }

    @Override
    public String toString() {
        return "MathOperator{" +
            "desc='" + desc + '\'' +
            ", codePoint=" + codePoint +
            ", chars='" + chars + '\'' +
            ", generalCategory='" + generalCategory + '\'' +
            ", combiningClass=" + combiningClass +
            ", latex='" + latex + '\'' +
            '}';
    }

    static {

        symbols.add(new MathOperator("for all", 0x2200, "∀", "Sm", 0, "\\forall"));
        symbols.add(new MathOperator("complement", 0x2201, "∁", "Sm", 0, "\\complement"));
        symbols.add(new MathOperator("partial differential", 0x2202, "∂", "Sm", 0, "\\partial"));
        symbols.add(new MathOperator("there exists", 0x2203, "∃", "Sm", 0, "\\exists"));
        symbols.add(new MathOperator("there does not exist", 0x2204, "∄", "Sm", 0, "\\nexists"));
        symbols.add(new MathOperator("empty set", 0x2205, "∅", "Sm", 0, "\\varnothing"));
        symbols.add(new MathOperator("increment", 0x2206, "∆", "Sm", 0, "\\increment"));
        symbols.add(new MathOperator("nabla", 0x2207, "∇", "Sm", 0, "\\nabla"));
        symbols.add(new MathOperator("element of", 0x2208, "∈", "Sm", 0, "\\in"));
        symbols.add(new MathOperator("not an element of", 0x2209, "∉", "Sm", 0, "\\notin"));
        symbols.add(new MathOperator("element of", 0x220a, "∊", "Sm", 0, "\\smallin"));
        symbols.add(new MathOperator("contains as member", 0x220b, "∋", "Sm", 0, "\\ni"));
        symbols.add(new MathOperator("does not contain as member", 0x220c, "∌", "Sm", 0, "\\nni"));
        symbols.add(new MathOperator("contains as member", 0x220d, "∍", "Sm", 0, "\\smallni"));
        symbols.add(new MathOperator("end of proof", 0x220e, "∎", "Sm", 0, "\\QED"));
        symbols.add(new MathOperator("n-ary product", 0x220f, "∏", "Sm", 0, "\\prod"));
        symbols.add(new MathOperator("n-ary coproduct", 0x2210, "∐", "Sm", 0, "\\coprod"));
        symbols.add(new MathOperator("n-ary summation", 0x2211, "∑", "Sm", 0, "\\sum"));
        symbols.add(new MathOperator("minus sign", 0x2212, "−", "Sm", 0, "\\minus"));
        symbols.add(new MathOperator("minus-or-plus sign", 0x2213, "∓", "Sm", 0, "\\mp"));
        symbols.add(new MathOperator("dot plus", 0x2214, "∔", "Sm", 0, "\\dotplus"));
        symbols.add(new MathOperator("division slash", 0x2215, "∕", "Sm", 0, "\\divslash"));
        symbols.add(new MathOperator("set minus", 0x2216, "∖", "Sm", 0, "\\smallsetminus"));
        symbols.add(new MathOperator("asterisk operator", 0x2217, "∗", "Sm", 0, "\\ast"));
        symbols.add(new MathOperator("ring operator", 0x2218, "∘", "Sm", 0, "\\vysmwhtcircle"));
        symbols.add(new MathOperator("bullet operator", 0x2219, "∙", "Sm", 0, "\\vysmblkcircle"));
        symbols.add(new MathOperator("square root", 0x221a, "√", "Sm", 0, "\\surd"));
        symbols.add(new MathOperator("cube root", 0x221b, "∛", "Sm", 0, "\\cuberoot"));
        symbols.add(new MathOperator("fourth root", 0x221c, "∜", "Sm", 0, "\\fourthroot"));
        symbols.add(new MathOperator("proportional to", 0x221d, "∝", "Sm", 0, "\\propto"));
        symbols.add(new MathOperator("infinity", 0x221e, "∞", "Sm", 0, "\\infty"));
        symbols.add(new MathOperator("right angle", 0x221f, "∟", "Sm", 0, "\\rightangle"));
        symbols.add(new MathOperator("angle", 0x2220, "∠", "Sm", 0, "\\angle"));
        symbols.add(new MathOperator("measured angle", 0x2221, "∡", "Sm", 0, "\\measuredangle"));
        symbols.add(new MathOperator("spherical angle", 0x2222, "∢", "Sm", 0, "\\sphericalangle"));
        symbols.add(new MathOperator("divides", 0x2223, "∣", "Sm", 0, "\\mid"));
        symbols.add(new MathOperator("does not divide", 0x2224, "∤", "Sm", 0, "\\nmid"));
        symbols.add(new MathOperator("parallel to", 0x2225, "∥", "Sm", 0, "\\parallel"));
        symbols.add(new MathOperator("not parallel to", 0x2226, "∦", "Sm", 0, "\\nparallel"));
        symbols.add(new MathOperator("logical and", 0x2227, "∧", "Sm", 0, "\\wedge"));
        symbols.add(new MathOperator("logical or", 0x2228, "∨", "Sm", 0, "\\vee"));
        symbols.add(new MathOperator("intersection", 0x2229, "∩", "Sm", 0, "\\cap"));
        symbols.add(new MathOperator("union", 0x222a, "∪", "Sm", 0, "\\cup"));
        symbols.add(new MathOperator("integral", 0x222b, "∫", "Sm", 0, "\\int"));
        symbols.add(new MathOperator("double integral", 0x222c, "∬", "Sm", 0, "\\iint"));
        symbols.add(new MathOperator("triple integral", 0x222d, "∭", "Sm", 0, "\\iiint"));
        symbols.add(new MathOperator("contour integral", 0x222e, "∮", "Sm", 0, "\\oint"));
        symbols.add(new MathOperator("surface integral", 0x222f, "∯", "Sm", 0, "\\oiint"));
        symbols.add(new MathOperator("volume integral", 0x2230, "∰", "Sm", 0, "\\oiiint"));
        symbols.add(new MathOperator("clockwise integral", 0x2231, "∱", "Sm", 0, "\\intclockwise"));
        symbols.add(new MathOperator("clockwise contour integral", 0x2232, "∲", "Sm", 0, "\\varointclockwise"));
        symbols.add(new MathOperator("anticlockwise contour integral", 0x2233, "∳", "Sm", 0, "\\ointctrclockwise"));
        symbols.add(new MathOperator("therefore", 0x2234, "∴", "Sm", 0, "\\therefore"));
        symbols.add(new MathOperator("because", 0x2235, "∵", "Sm", 0, "\\because"));
        symbols.add(new MathOperator("ratio", 0x2236, "∶", "Sm", 0, "\\mathratio"));
        symbols.add(new MathOperator("proportion", 0x2237, "∷", "Sm", 0, "\\Colon"));
        symbols.add(new MathOperator("dot minus", 0x2238, "∸", "Sm", 0, "\\dotminus"));
        symbols.add(new MathOperator("excess", 0x2239, "∹", "Sm", 0, "\\dashcolon"));
        symbols.add(new MathOperator("geometric proportion", 0x223a, "∺", "Sm", 0, "\\dotsminusdots"));
        symbols.add(new MathOperator("homothetic", 0x223b, "∻", "Sm", 0, "\\kernelcontraction"));
        symbols.add(new MathOperator("tilde operator", 0x223c, "∼", "Sm", 0, "\\sim"));
        symbols.add(new MathOperator("reversed tilde", 0x223d, "∽", "Sm", 0, "\\backsim"));
        symbols.add(new MathOperator("inverted lazy s", 0x223e, "∾", "Sm", 0, "\\invlazys"));
        symbols.add(new MathOperator("sine wave", 0x223f, "∿", "Sm", 0, "\\sinewave"));
        symbols.add(new MathOperator("wreath product", 0x2240, "≀", "Sm", 0, "\\wr"));
        symbols.add(new MathOperator("not tilde", 0x2241, "≁", "Sm", 0, "\\nsim"));
        symbols.add(new MathOperator("minus tilde", 0x2242, "≂", "Sm", 0, "\\eqsim"));
        symbols.add(new MathOperator("asymptotically equal to", 0x2243, "≃", "Sm", 0, "\\sime"));
        symbols.add(new MathOperator("not asymptotically equal to", 0x2244, "≄", "Sm", 0, "\\nsimeq"));
        symbols.add(new MathOperator("approximately equal to", 0x2245, "≅", "Sm", 0, "\\cong"));
        symbols.add(new MathOperator("approximately but not actually equal to", 0x2246, "≆", "Sm", 0, "\\simneqq"));
        symbols.add(new MathOperator("neither approximately nor actually equal to", 0x2247, "≇", "Sm", 0, "\\ncong"));
        symbols.add(new MathOperator("almost equal to", 0x2248, "≈", "Sm", 0, "\\approx"));
        symbols.add(new MathOperator("not almost equal to", 0x2249, "≉", "Sm", 0, "\\napprox"));
        symbols.add(new MathOperator("almost equal or equal to", 0x224a, "≊", "Sm", 0, "\\approxeq"));
        symbols.add(new MathOperator("triple tilde", 0x224b, "≋", "Sm", 0, "\\approxident"));
        symbols.add(new MathOperator("all equal to", 0x224c, "≌", "Sm", 0, "\\backcong"));
        symbols.add(new MathOperator("equivalent to", 0x224d, "≍", "Sm", 0, "\\asymp"));
        symbols.add(new MathOperator("geometrically equivalent to", 0x224e, "≎", "Sm", 0, "\\Bumpeq"));
        symbols.add(new MathOperator("difference between", 0x224f, "≏", "Sm", 0, "\\bumpeq"));
        symbols.add(new MathOperator("approaches the limit", 0x2250, "≐", "Sm", 0, "\\doteq"));
        symbols.add(new MathOperator("geometrically equal to", 0x2251, "≑", "Sm", 0, "\\Doteq"));
        symbols.add(new MathOperator("approximately equal to or the image of", 0x2252, "≒", "Sm", 0, "\\fallingdotseq"));
        symbols.add(new MathOperator("image of or approximately equal to", 0x2253, "≓", "Sm", 0, "\\risingdotseq"));
        symbols.add(new MathOperator("colon equals", 0x2254, "≔", "Sm", 0, "\\coloneq"));
        symbols.add(new MathOperator("equals colon", 0x2255, "≕", "Sm", 0, "\\eqcolon"));
        symbols.add(new MathOperator("ring in equal to", 0x2256, "≖", "Sm", 0, "\\eqcirc"));
        symbols.add(new MathOperator("ring equal to", 0x2257, "≗", "Sm", 0, "\\circeq"));
        symbols.add(new MathOperator("corresponds to", 0x2258, "≘", "Sm", 0, "\\arceq"));
        symbols.add(new MathOperator("estimates", 0x2259, "≙", "Sm", 0, "\\wedgeq"));
        symbols.add(new MathOperator("equiangular to", 0x225a, "≚", "Sm", 0, "\\veeeq"));
        symbols.add(new MathOperator("star equals", 0x225b, "≛", "Sm", 0, "\\stareq"));
        symbols.add(new MathOperator("delta equal to", 0x225c, "≜", "Sm", 0, "\\triangleq"));
        symbols.add(new MathOperator("equal to by definition", 0x225d, "≝", "Sm", 0, "\\eqdef"));
        symbols.add(new MathOperator("measured by", 0x225e, "≞", "Sm", 0, "\\measeq"));
        symbols.add(new MathOperator("questioned equal to", 0x225f, "≟", "Sm", 0, "\\questeq"));
        symbols.add(new MathOperator("not equal to", 0x2260, "≠", "Sm", 0, "\\ne"));
        symbols.add(new MathOperator("identical to", 0x2261, "≡", "Sm", 0, "\\equiv"));
        symbols.add(new MathOperator("not identical to", 0x2262, "≢", "Sm", 0, "\\nequiv"));
        symbols.add(new MathOperator("strictly equivalent to", 0x2263, "≣", "Sm", 0, "\\Equiv"));
        symbols.add(new MathOperator("less-than or equal to", 0x2264, "≤", "Sm", 0, "\\leq"));
        symbols.add(new MathOperator("greater-than or equal to", 0x2265, "≥", "Sm", 0, "\\geq"));
        symbols.add(new MathOperator("less-than over equal to", 0x2266, "≦", "Sm", 0, "\\leqq"));
        symbols.add(new MathOperator("greater-than over equal to", 0x2267, "≧", "Sm", 0, "\\geqq"));
        symbols.add(new MathOperator("less-than but not equal to", 0x2268, "≨", "Sm", 0, "\\lneqq"));
        symbols.add(new MathOperator("greater-than but not equal to", 0x2269, "≩", "Sm", 0, "\\gneqq"));
        symbols.add(new MathOperator("much less-than", 0x226a, "≪", "Sm", 0, "\\ll"));
        symbols.add(new MathOperator("much greater-than", 0x226b, "≫", "Sm", 0, "\\gg"));
        symbols.add(new MathOperator("between", 0x226c, "≬", "Sm", 0, "\\between"));
        symbols.add(new MathOperator("not equivalent to", 0x226d, "≭", "Sm", 0, "\\nasymp"));
        symbols.add(new MathOperator("not less-than", 0x226e, "≮", "Sm", 0, "\\nless"));
        symbols.add(new MathOperator("not greater-than", 0x226f, "≯", "Sm", 0, "\\ngtr"));
        symbols.add(new MathOperator("neither less-than nor equal to", 0x2270, "≰", "Sm", 0, "\\nleq"));
        symbols.add(new MathOperator("neither greater-than nor equal to", 0x2271, "≱", "Sm", 0, "\\ngeq"));
        symbols.add(new MathOperator("less-than or equivalent to", 0x2272, "≲", "Sm", 0, "\\lesssim"));
        symbols.add(new MathOperator("greater-than or equivalent to", 0x2273, "≳", "Sm", 0, "\\gtrsim"));
        symbols.add(new MathOperator("neither less-than nor equivalent to", 0x2274, "≴", "Sm", 0, "\\nlesssim"));
        symbols.add(new MathOperator("neither greater-than nor equivalent to", 0x2275, "≵", "Sm", 0, "\\ngtrsim"));
        symbols.add(new MathOperator("less-than or greater-than", 0x2276, "≶", "Sm", 0, "\\lessgtr"));
        symbols.add(new MathOperator("greater-than or less-than", 0x2277, "≷", "Sm", 0, "\\gtrless"));
        symbols.add(new MathOperator("neither less-than nor greater-than", 0x2278, "≸", "Sm", 0, "\\nlessgtr"));
        symbols.add(new MathOperator("neither greater-than nor less-than", 0x2279, "≹", "Sm", 0, "\\ngtrless"));
        symbols.add(new MathOperator("precedes", 0x227a, "≺", "Sm", 0, "\\prec"));
        symbols.add(new MathOperator("succeeds", 0x227b, "≻", "Sm", 0, "\\succ"));
        symbols.add(new MathOperator("precedes or equal to", 0x227c, "≼", "Sm", 0, "\\preccurlyeq"));
        symbols.add(new MathOperator("succeeds or equal to", 0x227d, "≽", "Sm", 0, "\\succcurlyeq"));
        symbols.add(new MathOperator("precedes or equivalent to", 0x227e, "≾", "Sm", 0, "\\precsim"));
        symbols.add(new MathOperator("succeeds or equivalent to", 0x227f, "≿", "Sm", 0, "\\succsim"));
        symbols.add(new MathOperator("does not precede", 0x2280, "⊀", "Sm", 0, "\\nprec"));
        symbols.add(new MathOperator("does not succeed", 0x2281, "⊁", "Sm", 0, "\\nsucc"));
        symbols.add(new MathOperator("subset of", 0x2282, "⊂", "Sm", 0, "\\subset"));
        symbols.add(new MathOperator("superset of", 0x2283, "⊃", "Sm", 0, "\\supset"));
        symbols.add(new MathOperator("not a subset of", 0x2284, "⊄", "Sm", 0, "\\nsubset"));
        symbols.add(new MathOperator("not a superset of", 0x2285, "⊅", "Sm", 0, "\\nsupset"));
        symbols.add(new MathOperator("subset of or equal to", 0x2286, "⊆", "Sm", 0, "\\subseteq"));
        symbols.add(new MathOperator("superset of or equal to", 0x2287, "⊇", "Sm", 0, "\\supseteq"));
        symbols.add(new MathOperator("neither a subset of nor equal to", 0x2288, "⊈", "Sm", 0, "\\nsubseteq"));
        symbols.add(new MathOperator("neither a superset of nor equal to", 0x2289, "⊉", "Sm", 0, "\\nsupseteq"));
        symbols.add(new MathOperator("subset of with not equal to", 0x228a, "⊊", "Sm", 0, "\\subsetneq"));
        symbols.add(new MathOperator("superset of with not equal to", 0x228b, "⊋", "Sm", 0, "\\supsetneq"));
        symbols.add(new MathOperator("multiset", 0x228c, "⊌", "Sm", 0, "\\cupleftarrow"));
        symbols.add(new MathOperator("multiset multiplication", 0x228d, "⊍", "Sm", 0, "\\cupdot"));
        symbols.add(new MathOperator("multiset union", 0x228e, "⊎", "Sm", 0, "\\uplus"));
        symbols.add(new MathOperator("square image of", 0x228f, "⊏", "Sm", 0, "\\sqsubset"));
        symbols.add(new MathOperator("square original of", 0x2290, "⊐", "Sm", 0, "\\sqsupset"));
        symbols.add(new MathOperator("square image of or equal to", 0x2291, "⊑", "Sm", 0, "\\sqsubseteq"));
        symbols.add(new MathOperator("square original of or equal to", 0x2292, "⊒", "Sm", 0, "\\sqsupseteq"));
        symbols.add(new MathOperator("square cap", 0x2293, "⊓", "Sm", 0, "\\sqcap"));
        symbols.add(new MathOperator("square cup", 0x2294, "⊔", "Sm", 0, "\\sqcup"));
        symbols.add(new MathOperator("circled plus", 0x2295, "⊕", "Sm", 0, "\\oplus"));
        symbols.add(new MathOperator("circled minus", 0x2296, "⊖", "Sm", 0, "\\ominus"));
        symbols.add(new MathOperator("circled times", 0x2297, "⊗", "Sm", 0, "\\otimes"));
        symbols.add(new MathOperator("circled division slash", 0x2298, "⊘", "Sm", 0, "\\oslash"));
        symbols.add(new MathOperator("circled dot operator", 0x2299, "⊙", "Sm", 0, "\\odot"));
        symbols.add(new MathOperator("circled ring operator", 0x229a, "⊚", "Sm", 0, "\\circledcirc"));
        symbols.add(new MathOperator("circled asterisk operator", 0x229b, "⊛", "Sm", 0, "\\circledast"));
        symbols.add(new MathOperator("circled equals", 0x229c, "⊜", "Sm", 0, "\\circledequal"));
        symbols.add(new MathOperator("circled dash", 0x229d, "⊝", "Sm", 0, "\\circleddash"));
        symbols.add(new MathOperator("squared plus", 0x229e, "⊞", "Sm", 0, "\\boxplus"));
        symbols.add(new MathOperator("squared minus", 0x229f, "⊟", "Sm", 0, "\\boxminus"));
        symbols.add(new MathOperator("squared times", 0x22a0, "⊠", "Sm", 0, "\\boxtimes"));
        symbols.add(new MathOperator("squared dot operator", 0x22a1, "⊡", "Sm", 0, "\\boxdot"));
        symbols.add(new MathOperator("right tack", 0x22a2, "⊢", "Sm", 0, "\\vdash"));
        symbols.add(new MathOperator("left tack", 0x22a3, "⊣", "Sm", 0, "\\dashv"));
        symbols.add(new MathOperator("down tack", 0x22a4, "⊤", "Sm", 0, "\\top"));
        symbols.add(new MathOperator("up tack", 0x22a5, "⊥", "Sm", 0, "\\bot"));
        symbols.add(new MathOperator("assertion", 0x22a6, "⊦", "Sm", 0, "\\assert"));
        symbols.add(new MathOperator("models", 0x22a7, "⊧", "Sm", 0, "\\models"));
        symbols.add(new MathOperator("true", 0x22a8, "⊨", "Sm", 0, "\\vDash"));
        symbols.add(new MathOperator("forces", 0x22a9, "⊩", "Sm", 0, "\\Vdash"));
        symbols.add(new MathOperator("triple vertical bar right turnstile", 0x22aa, "⊪", "Sm", 0, "\\Vvdash"));
        symbols.add(new MathOperator("double vertical bar double right turnstile", 0x22ab, "⊫", "Sm", 0, "\\VDash"));
        symbols.add(new MathOperator("does not prove", 0x22ac, "⊬", "Sm", 0, "\\nvdash"));
        symbols.add(new MathOperator("not true", 0x22ad, "⊭", "Sm", 0, "\\nvDash"));
        symbols.add(new MathOperator("does not force", 0x22ae, "⊮", "Sm", 0, "\\nVdash"));
        symbols.add(new MathOperator("negated double vertical bar double right turnstile", 0x22af, "⊯", "Sm", 0, "\\nVDash"));
        symbols.add(new MathOperator("precedes under relation", 0x22b0, "⊰", "Sm", 0, "\\prurel"));
        symbols.add(new MathOperator("succeeds under relation", 0x22b1, "⊱", "Sm", 0, "\\scurel"));
        symbols.add(new MathOperator("normal subgroup of", 0x22b2, "⊲", "Sm", 0, "\\vartriangleleft"));
        symbols.add(new MathOperator("contains as normal subgroup", 0x22b3, "⊳", "Sm", 0, "\\vartriangleright"));
        symbols.add(new MathOperator("normal subgroup of or equal to", 0x22b4, "⊴", "Sm", 0, "\\trianglelefteq"));
        symbols.add(new MathOperator("contains as normal subgroup or equal to", 0x22b5, "⊵", "Sm", 0, "\\trianglerighteq"));
        symbols.add(new MathOperator("original of", 0x22b6, "⊶", "Sm", 0, "\\origof"));
        symbols.add(new MathOperator("image of", 0x22b7, "⊷", "Sm", 0, "\\imageof"));
        symbols.add(new MathOperator("multimap", 0x22b8, "⊸", "Sm", 0, "\\multimap"));
        symbols.add(new MathOperator("hermitian conjugate matrix", 0x22b9, "⊹", "Sm", 0, "\\hermitmatrix"));
        symbols.add(new MathOperator("intercalate", 0x22ba, "⊺", "Sm", 0, "\\intercal"));
        symbols.add(new MathOperator("xor", 0x22bb, "⊻", "Sm", 0, "\\veebar"));
        symbols.add(new MathOperator("nand", 0x22bc, "⊼", "Sm", 0, "\\barwedge"));
        symbols.add(new MathOperator("nor", 0x22bd, "⊽", "Sm", 0, "\\barvee"));
        symbols.add(new MathOperator("right angle with arc", 0x22be, "⊾", "Sm", 0, "\\measuredrightangle"));
        symbols.add(new MathOperator("right triangle", 0x22bf, "⊿", "Sm", 0, "\\varlrtriangle"));
        symbols.add(new MathOperator("n-ary logical and", 0x22c0, "⋀", "Sm", 0, "\\bigwedge"));
        symbols.add(new MathOperator("n-ary logical or", 0x22c1, "⋁", "Sm", 0, "\\bigvee"));
        symbols.add(new MathOperator("n-ary intersection", 0x22c2, "⋂", "Sm", 0, "\\bigcap"));
        symbols.add(new MathOperator("n-ary union", 0x22c3, "⋃", "Sm", 0, "\\bigcup"));
        symbols.add(new MathOperator("diamond operator", 0x22c4, "⋄", "Sm", 0, "\\smwhtdiamond"));
        symbols.add(new MathOperator("dot operator", 0x22c5, "⋅", "Sm", 0, "\\cdot"));
        symbols.add(new MathOperator("star operator", 0x22c6, "⋆", "Sm", 0, "\\star"));
        symbols.add(new MathOperator("division times", 0x22c7, "⋇", "Sm", 0, "\\divideontimes"));
        symbols.add(new MathOperator("bowtie", 0x22c8, "⋈", "Sm", 0, "\\bowtie"));
        symbols.add(new MathOperator("left normal factor semidirect product", 0x22c9, "⋉", "Sm", 0, "\\ltimes"));
        symbols.add(new MathOperator("right normal factor semidirect product", 0x22ca, "⋊", "Sm", 0, "\\rtimes"));
        symbols.add(new MathOperator("left semidirect product", 0x22cb, "⋋", "Sm", 0, "\\leftthreetimes"));
        symbols.add(new MathOperator("right semidirect product", 0x22cc, "⋌", "Sm", 0, "\\rightthreetimes"));
        symbols.add(new MathOperator("reversed tilde equals", 0x22cd, "⋍", "Sm", 0, "\\backsimeq"));
        symbols.add(new MathOperator("curly logical or", 0x22ce, "⋎", "Sm", 0, "\\curlyvee"));
        symbols.add(new MathOperator("curly logical and", 0x22cf, "⋏", "Sm", 0, "\\curlywedge"));
        symbols.add(new MathOperator("double subset", 0x22d0, "⋐", "Sm", 0, "\\Subset"));
        symbols.add(new MathOperator("double superset", 0x22d1, "⋑", "Sm", 0, "\\Supset"));
        symbols.add(new MathOperator("double intersection", 0x22d2, "⋒", "Sm", 0, "\\Cap"));
        symbols.add(new MathOperator("double union", 0x22d3, "⋓", "Sm", 0, "\\Cup"));
        symbols.add(new MathOperator("pitchfork", 0x22d4, "⋔", "Sm", 0, "\\pitchfork"));
        symbols.add(new MathOperator("equal and parallel to", 0x22d5, "⋕", "Sm", 0, "\\equalparallel"));
        symbols.add(new MathOperator("less-than with dot", 0x22d6, "⋖", "Sm", 0, "\\lessdot"));
        symbols.add(new MathOperator("greater-than with dot", 0x22d7, "⋗", "Sm", 0, "\\gtrdot"));
        symbols.add(new MathOperator("very much less-than", 0x22d8, "⋘", "Sm", 0, "\\lll"));
        symbols.add(new MathOperator("very much greater-than", 0x22d9, "⋙", "Sm", 0, "\\ggg"));
        symbols.add(new MathOperator("less-than equal to or greater-than", 0x22da, "⋚", "Sm", 0, "\\lesseqgtr"));
        symbols.add(new MathOperator("greater-than equal to or less-than", 0x22db, "⋛", "Sm", 0, "\\gtreqless"));
        symbols.add(new MathOperator("equal to or less-than", 0x22dc, "⋜", "Sm", 0, "\\eqless"));
        symbols.add(new MathOperator("equal to or greater-than", 0x22dd, "⋝", "Sm", 0, "\\eqgtr"));
        symbols.add(new MathOperator("equal to or precedes", 0x22de, "⋞", "Sm", 0, "\\curlyeqprec"));
        symbols.add(new MathOperator("equal to or succeeds", 0x22df, "⋟", "Sm", 0, "\\curlyeqsucc"));
        symbols.add(new MathOperator("does not precede or equal", 0x22e0, "⋠", "Sm", 0, "\\npreccurlyeq"));
        symbols.add(new MathOperator("does not succeed or equal", 0x22e1, "⋡", "Sm", 0, "\\nsucccurlyeq"));
        symbols.add(new MathOperator("not square image of or equal to", 0x22e2, "⋢", "Sm", 0, "\\nsqsubseteq"));
        symbols.add(new MathOperator("not square original of or equal to", 0x22e3, "⋣", "Sm", 0, "\\nsqsupseteq"));
        symbols.add(new MathOperator("square image of or not equal to", 0x22e4, "⋤", "Sm", 0, "\\sqsubsetneq"));
        symbols.add(new MathOperator("square original of or not equal to", 0x22e5, "⋥", "Sm", 0, "\\sqsupsetneq"));
        symbols.add(new MathOperator("less-than but not equivalent to", 0x22e6, "⋦", "Sm", 0, "\\lnsim"));
        symbols.add(new MathOperator("greater-than but not equivalent to", 0x22e7, "⋧", "Sm", 0, "\\gnsim"));
        symbols.add(new MathOperator("precedes but not equivalent to", 0x22e8, "⋨", "Sm", 0, "\\precnsim"));
        symbols.add(new MathOperator("succeeds but not equivalent to", 0x22e9, "⋩", "Sm", 0, "\\succnsim"));
        symbols.add(new MathOperator("not normal subgroup of", 0x22ea, "⋪", "Sm", 0, "\\nvartriangleleft"));
        symbols.add(new MathOperator("does not contain as normal subgroup", 0x22eb, "⋫", "Sm", 0, "\\nvartriangleright"));
        symbols.add(new MathOperator("not normal subgroup of or equal to", 0x22ec, "⋬", "Sm", 0, "\\ntrianglelefteq"));
        symbols.add(new MathOperator("does not contain as normal subgroup or equal", 0x22ed, "⋭", "Sm", 0, "\\ntrianglerighteq"));
        symbols.add(new MathOperator("vertical ellipsis", 0x22ee, "⋮", "Sm", 0, "\\vdots"));
        symbols.add(new MathOperator("midline horizontal ellipsis", 0x22ef, "⋯", "Sm", 0, "\\unicodecdots"));
        symbols.add(new MathOperator("up right diagonal ellipsis", 0x22f0, "⋰", "Sm", 0, "\\adots"));
        symbols.add(new MathOperator("down right diagonal ellipsis", 0x22f1, "⋱", "Sm", 0, "\\ddots"));
        symbols.add(new MathOperator("element of with long horizontal stroke", 0x22f2, "⋲", "Sm", 0, "\\disin"));
        symbols.add(new MathOperator("element of with vertical bar at end of horizontal stroke", 0x22f3, "⋳", "Sm", 0, "\\varisins"));
        symbols.add(new MathOperator("element of with vertical bar at end of horizontal stroke", 0x22f4, "⋴", "Sm", 0, "\\isins"));
        symbols.add(new MathOperator("element of with dot above", 0x22f5, "⋵", "Sm", 0, "\\isindot"));
        symbols.add(new MathOperator("element of with overbar", 0x22f6, "⋶", "Sm", 0, "\\varisinobar"));
        symbols.add(new MathOperator("element of with overbar", 0x22f7, "⋷", "Sm", 0, "\\isinobar"));
        symbols.add(new MathOperator("element of with underbar", 0x22f8, "⋸", "Sm", 0, "\\isinvb"));
        symbols.add(new MathOperator("element of with two horizontal strokes", 0x22f9, "⋹", "Sm", 0, "\\isinE"));
        symbols.add(new MathOperator("contains with long horizontal stroke", 0x22fa, "⋺", "Sm", 0, "\\nisd"));
        symbols.add(new MathOperator("contains with vertical bar at end of horizontal stroke", 0x22fb, "⋻", "Sm", 0, "\\varnis"));
        symbols.add(new MathOperator("contains with vertical bar at end of horizontal stroke", 0x22fc, "⋼", "Sm", 0, "\\nis"));
        symbols.add(new MathOperator("contains with overbar", 0x22fd, "⋽", "Sm", 0, "\\varniobar"));
        symbols.add(new MathOperator("contains with overbar", 0x22fe, "⋾", "Sm", 0, "\\niobar"));
        symbols.add(new MathOperator("z notation bag membership", 0x22ff, "⋿", "Sm", 0, "\\bagmember"));
        symbols.add(new MathOperator("three dimensional angle", 0x27c0, "⟀", "Sm", 0, "\\threedangle"));
        symbols.add(new MathOperator("white triangle containing white triangle", 0x27c1, "⟁", "Sm", 0, "\\whiteinwhitetriangle"));
        symbols.add(new MathOperator("perpendicular", 0x27c2, "⟂", "Sm", 0, "\\perp"));
        symbols.add(new MathOperator("open subset", 0x27c3, "⟃", "Sm", 0, "\\subsetcirc"));
        symbols.add(new MathOperator("open superset", 0x27c4, "⟄", "Sm", 0, "\\supsetcirc"));
        symbols.add(new MathOperator("left s-shaped bag delimiter", 0x27c5, "⟅", "Ps", 0, "\\lbag"));
        symbols.add(new MathOperator("right s-shaped bag delimiter", 0x27c6, "⟆", "Pe", 0, "\\rbag"));
        symbols.add(new MathOperator("or with dot inside", 0x27c7, "⟇", "Sm", 0, "\\veedot"));
        symbols.add(new MathOperator("reverse solidus preceding subset", 0x27c8, "⟈", "Sm", 0, "\\bsolhsub"));
        symbols.add(new MathOperator("superset preceding solidus", 0x27c9, "⟉", "Sm", 0, "\\suphsol"));
        symbols.add(new MathOperator("vertical bar with horizontal stroke", 0x27ca, "⟊", "Sm", 0));
        symbols.add(new MathOperator("mathematical rising diagonal", 0x27cb, "⟋", "Sm", 0));
        symbols.add(new MathOperator("long division", 0x27cc, "⟌", "Sm", 0, "\\longdivision"));
        symbols.add(new MathOperator("mathematical falling diagonal", 0x27cd, "⟍", "Sm", 0));
        symbols.add(new MathOperator("squared logical and", 0x27ce, "⟎", "Sm", 0));
        symbols.add(new MathOperator("squared logical or", 0x27cf, "⟏", "Sm", 0));
        symbols.add(new MathOperator("white diamond with centred dot", 0x27d0, "⟐", "Sm", 0, "\\diamondcdot"));
        symbols.add(new MathOperator("and with dot", 0x27d1, "⟑", "Sm", 0, "\\wedgedot"));
        symbols.add(new MathOperator("element of opening upwards", 0x27d2, "⟒", "Sm", 0, "\\upin"));
        symbols.add(new MathOperator("lower right corner with dot", 0x27d3, "⟓", "Sm", 0, "\\pullback"));
        symbols.add(new MathOperator("upper left corner with dot", 0x27d4, "⟔", "Sm", 0, "\\pushout"));
        symbols.add(new MathOperator("left outer join", 0x27d5, "⟕", "Sm", 0, "\\leftouterjoin"));
        symbols.add(new MathOperator("right outer join", 0x27d6, "⟖", "Sm", 0, "\\rightouterjoin"));
        symbols.add(new MathOperator("full outer join", 0x27d7, "⟗", "Sm", 0, "\\fullouterjoin"));
        symbols.add(new MathOperator("large up tack", 0x27d8, "⟘", "Sm", 0, "\\bigbot"));
        symbols.add(new MathOperator("large down tack", 0x27d9, "⟙", "Sm", 0, "\\bigtop"));
        symbols.add(new MathOperator("left and right double turnstile", 0x27da, "⟚", "Sm", 0, "\\DashVDash"));
        symbols.add(new MathOperator("left and right tack", 0x27db, "⟛", "Sm", 0, "\\dashVdash"));
        symbols.add(new MathOperator("left multimap", 0x27dc, "⟜", "Sm", 0, "\\multimapinv"));
        symbols.add(new MathOperator("long right tack", 0x27dd, "⟝", "Sm", 0, "\\vlongdash"));
        symbols.add(new MathOperator("long left tack", 0x27de, "⟞", "Sm", 0, "\\longdashv"));
        symbols.add(new MathOperator("up tack with circle above", 0x27df, "⟟", "Sm", 0, "\\cirbot"));
        symbols.add(new MathOperator("lozenge divided by horizontal rule", 0x27e0, "⟠", "Sm", 0, "\\lozengeminus"));
        symbols.add(new MathOperator("white concave-sided diamond", 0x27e1, "⟡", "Sm", 0, "\\concavediamond"));
        symbols.add(new MathOperator("white concave-sided diamond with leftwards tick", 0x27e2, "⟢", "Sm", 0, "\\concavediamondtickleft"));
        symbols.add(new MathOperator("white concave-sided diamond with rightwards tick", 0x27e3, "⟣", "Sm", 0, "\\concavediamondtickright"));
        symbols.add(new MathOperator("white square with leftwards tick", 0x27e4, "⟤", "Sm", 0, "\\whitesquaretickleft"));
        symbols.add(new MathOperator("white square with rightwards tick", 0x27e5, "⟥", "Sm", 0, "\\whitesquaretickright"));
        symbols.add(new MathOperator("mathematical left white square bracket", 0x27e6, "⟦", "Ps", 0, "\\lBrack"));
        symbols.add(new MathOperator("mathematical right white square bracket", 0x27e7, "⟧", "Pe", 0, "\\rBrack"));
        symbols.add(new MathOperator("mathematical left angle bracket", 0x27e8, "⟨", "Ps", 0, "\\langle"));
        symbols.add(new MathOperator("mathematical right angle bracket", 0x27e9, "⟩", "Pe", 0, "\\rangle"));
        symbols.add(new MathOperator("mathematical left double angle bracket", 0x27ea, "⟪", "Ps", 0, "\\lAngle"));
        symbols.add(new MathOperator("mathematical right double angle bracket", 0x27eb, "⟫", "Pe", 0, "\\rAngle"));
        symbols.add(new MathOperator("mathematical left white tortoise shell bracket", 0x27ec, "⟬", "Ps", 0, "\\Lbrbrak"));
        symbols.add(new MathOperator("mathematical right white tortoise shell bracket", 0x27ed, "⟭", "Pe", 0, "\\Rbrbrak"));
        symbols.add(new MathOperator("mathematical left flattened parenthesis", 0x27ee, "⟮", "Ps", 0, "\\lgroup"));
        symbols.add(new MathOperator("mathematical right flattened parenthesis", 0x27ef, "⟯", "Pe", 0, "\\rgroup"));
        symbols.add(new MathOperator("triple vertical bar delimiter", 0x2980, "⦀", "Sm", 0, "\\Vvert"));
        symbols.add(new MathOperator("z notation spot", 0x2981, "⦁", "Sm", 0, "\\mdsmblkcircle"));
        symbols.add(new MathOperator("z notation type colon", 0x2982, "⦂", "Sm", 0, "\\typecolon"));
        symbols.add(new MathOperator("left white curly bracket", 0x2983, "⦃", "Ps", 0, "\\lBrace"));
        symbols.add(new MathOperator("right white curly bracket", 0x2984, "⦄", "Pe", 0, "\\rBrace"));
        symbols.add(new MathOperator("left white parenthesis", 0x2985, "⦅", "Ps", 0, "\\lParen"));
        symbols.add(new MathOperator("right white parenthesis", 0x2986, "⦆", "Pe", 0, "\\rParen"));
        symbols.add(new MathOperator("z notation left image bracket", 0x2987, "⦇", "Ps", 0, "\\llparenthesis"));
        symbols.add(new MathOperator("z notation right image bracket", 0x2988, "⦈", "Pe", 0, "\\rrparenthesis"));
        symbols.add(new MathOperator("z notation left binding bracket", 0x2989, "⦉", "Ps", 0, "\\llangle"));
        symbols.add(new MathOperator("z notation right binding bracket", 0x298a, "⦊", "Pe", 0, "\\rrangle"));
        symbols.add(new MathOperator("left square bracket with underbar", 0x298b, "⦋", "Ps", 0, "\\lbrackubar"));
        symbols.add(new MathOperator("right square bracket with underbar", 0x298c, "⦌", "Pe", 0, "\\rbrackubar"));
        symbols.add(new MathOperator("left square bracket with tick in top corner", 0x298d, "⦍", "Ps", 0, "\\lbrackultick"));
        symbols.add(new MathOperator("right square bracket with tick in bottom corner", 0x298e, "⦎", "Pe", 0, "\\rbracklrtick"));
        symbols.add(new MathOperator("left square bracket with tick in bottom corner", 0x298f, "⦏", "Ps", 0, "\\lbracklltick"));
        symbols.add(new MathOperator("right square bracket with tick in top corner", 0x2990, "⦐", "Pe", 0, "\\rbrackurtick"));
        symbols.add(new MathOperator("left angle bracket with dot", 0x2991, "⦑", "Ps", 0, "\\langledot"));
        symbols.add(new MathOperator("right angle bracket with dot", 0x2992, "⦒", "Pe", 0, "\\rangledot"));
        symbols.add(new MathOperator("left arc less-than bracket", 0x2993, "⦓", "Ps", 0, "\\lparenless"));
        symbols.add(new MathOperator("right arc greater-than bracket", 0x2994, "⦔", "Pe", 0, "\\rparengtr"));
        symbols.add(new MathOperator("double left arc greater-than bracket", 0x2995, "⦕", "Ps", 0, "\\Lparengtr"));
        symbols.add(new MathOperator("double right arc less-than bracket", 0x2996, "⦖", "Pe", 0, "\\Rparenless"));
        symbols.add(new MathOperator("left black tortoise shell bracket", 0x2997, "⦗", "Ps", 0, "\\lblkbrbrak"));
        symbols.add(new MathOperator("right black tortoise shell bracket", 0x2998, "⦘", "Pe", 0, "\\rblkbrbrak"));
        symbols.add(new MathOperator("dotted fence", 0x2999, "⦙", "Sm", 0, "\\fourvdots"));
        symbols.add(new MathOperator("vertical zigzag line", 0x299a, "⦚", "Sm", 0, "\\vzigzag"));
        symbols.add(new MathOperator("measured angle opening left", 0x299b, "⦛", "Sm", 0, "\\measuredangleleft"));
        symbols.add(new MathOperator("right angle variant with square", 0x299c, "⦜", "Sm", 0, "\\rightanglesqr"));
        symbols.add(new MathOperator("measured right angle with dot", 0x299d, "⦝", "Sm", 0, "\\rightanglemdot"));
        symbols.add(new MathOperator("angle with s inside", 0x299e, "⦞", "Sm", 0, "\\angles"));
        symbols.add(new MathOperator("acute angle", 0x299f, "⦟", "Sm", 0, "\\angdnr"));
        symbols.add(new MathOperator("spherical angle opening left", 0x29a0, "⦠", "Sm", 0, "\\gtlpar"));
        symbols.add(new MathOperator("spherical angle opening up", 0x29a1, "⦡", "Sm", 0, "\\sphericalangleup"));
        symbols.add(new MathOperator("turned angle", 0x29a2, "⦢", "Sm", 0, "\\turnangle"));
        symbols.add(new MathOperator("reversed angle", 0x29a3, "⦣", "Sm", 0, "\\revangle"));
        symbols.add(new MathOperator("angle with underbar", 0x29a4, "⦤", "Sm", 0, "\\angleubar"));
        symbols.add(new MathOperator("reversed angle with underbar", 0x29a5, "⦥", "Sm", 0, "\\revangleubar"));
        symbols.add(new MathOperator("oblique angle opening up", 0x29a6, "⦦", "Sm", 0, "\\wideangledown"));
        symbols.add(new MathOperator("oblique angle opening down", 0x29a7, "⦧", "Sm", 0, "\\wideangleup"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing up and right", 0x29a8, "⦨", "Sm", 0, "\\measanglerutone"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing up and left", 0x29a9, "⦩", "Sm", 0, "\\measanglelutonw"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing down and right", 0x29aa, "⦪", "Sm", 0, "\\measanglerdtose"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing down and left", 0x29ab, "⦫", "Sm", 0, "\\measangleldtosw"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing right and up", 0x29ac, "⦬", "Sm", 0, "\\measangleurtone"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing left and up", 0x29ad, "⦭", "Sm", 0, "\\measangleultonw"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing right and down", 0x29ae, "⦮", "Sm", 0, "\\measangledrtose"));
        symbols.add(new MathOperator("measured angle with open arm ending in arrow pointing left and down", 0x29af, "⦯", "Sm", 0, "\\measangledltosw"));
        symbols.add(new MathOperator("reversed empty set", 0x29b0, "⦰", "Sm", 0, "\\revemptyset"));
        symbols.add(new MathOperator("empty set with overbar", 0x29b1, "⦱", "Sm", 0, "\\emptysetobar"));
        symbols.add(new MathOperator("empty set with circle above", 0x29b2, "⦲", "Sm", 0, "\\emptysetocirc"));
        symbols.add(new MathOperator("empty set with right arrow above", 0x29b3, "⦳", "Sm", 0, "\\emptysetoarr"));
        symbols.add(new MathOperator("empty set with left arrow above", 0x29b4, "⦴", "Sm", 0, "\\emptysetoarrl"));
        symbols.add(new MathOperator("circle with horizontal bar", 0x29b5, "⦵", "Sm", 0, "\\circlehbar"));
        symbols.add(new MathOperator("circled vertical bar", 0x29b6, "⦶", "Sm", 0, "\\circledvert"));
        symbols.add(new MathOperator("circled parallel", 0x29b7, "⦷", "Sm", 0, "\\circledparallel"));
        symbols.add(new MathOperator("circled reverse solidus", 0x29b8, "⦸", "Sm", 0, "\\obslash"));
        symbols.add(new MathOperator("circled perpendicular", 0x29b9, "⦹", "Sm", 0, "\\operp"));
        symbols.add(new MathOperator("circle divided by horizontal bar and top half divided by vertical bar", 0x29ba, "⦺", "Sm", 0, "\\obot"));
        symbols.add(new MathOperator("circle with superimposed x", 0x29bb, "⦻", "Sm", 0, "\\olcross"));
        symbols.add(new MathOperator("circled anticlockwise-rotated division sign", 0x29bc, "⦼", "Sm", 0, "\\odotslashdot"));
        symbols.add(new MathOperator("up arrow through circle", 0x29bd, "⦽", "Sm", 0, "\\uparrowoncircle"));
        symbols.add(new MathOperator("circled white bullet", 0x29be, "⦾", "Sm", 0, "\\circledwhitebullet"));
        symbols.add(new MathOperator("circled bullet", 0x29bf, "⦿", "Sm", 0, "\\circledbullet"));
        symbols.add(new MathOperator("circled less-than", 0x29c0, "⧀", "Sm", 0, "\\olessthan"));
        symbols.add(new MathOperator("circled greater-than", 0x29c1, "⧁", "Sm", 0, "\\ogreaterthan"));
        symbols.add(new MathOperator("circle with circle to the right", 0x29c2, "⧂", "Sm", 0, "\\cirscir"));
        symbols.add(new MathOperator("circle with two horizontal strokes to the right", 0x29c3, "⧃", "Sm", 0, "\\cirE"));
        symbols.add(new MathOperator("squared rising diagonal slash", 0x29c4, "⧄", "Sm", 0, "\\boxdiag"));
        symbols.add(new MathOperator("squared falling diagonal slash", 0x29c5, "⧅", "Sm", 0, "\\boxbslash"));
        symbols.add(new MathOperator("squared asterisk", 0x29c6, "⧆", "Sm", 0, "\\boxast"));
        symbols.add(new MathOperator("squared circle", 0x29c7, "⧇", "Sm", 0, "\\boxcircle"));
        symbols.add(new MathOperator("squared square", 0x29c8, "⧈", "Sm", 0, "\\boxbox"));
        symbols.add(new MathOperator("two joined squares", 0x29c9, "⧉", "Sm", 0, "\\boxonbox"));
        symbols.add(new MathOperator("triangle with dot above", 0x29ca, "⧊", "Sm", 0, "\\triangleodot"));
        symbols.add(new MathOperator("triangle with underbar", 0x29cb, "⧋", "Sm", 0, "\\triangleubar"));
        symbols.add(new MathOperator("s in triangle", 0x29cc, "⧌", "Sm", 0, "\\triangles"));
        symbols.add(new MathOperator("triangle with serifs at bottom", 0x29cd, "⧍", "Sm", 0, "\\triangleserifs"));
        symbols.add(new MathOperator("right triangle above left triangle", 0x29ce, "⧎", "Sm", 0, "\\rtriltri"));
        symbols.add(new MathOperator("left triangle beside vertical bar", 0x29cf, "⧏", "Sm", 0, "\\ltrivb"));
        symbols.add(new MathOperator("vertical bar beside right triangle", 0x29d0, "⧐", "Sm", 0, "\\vbrtri"));
        symbols.add(new MathOperator("bowtie with left half black", 0x29d1, "⧑", "Sm", 0, "\\lfbowtie"));
        symbols.add(new MathOperator("bowtie with right half black", 0x29d2, "⧒", "Sm", 0, "\\rfbowtie"));
        symbols.add(new MathOperator("black bowtie", 0x29d3, "⧓", "Sm", 0, "\\fbowtie"));
        symbols.add(new MathOperator("times with left half black", 0x29d4, "⧔", "Sm", 0, "\\lftimes"));
        symbols.add(new MathOperator("times with right half black", 0x29d5, "⧕", "Sm", 0, "\\rftimes"));
        symbols.add(new MathOperator("white hourglass", 0x29d6, "⧖", "Sm", 0, "\\hourglass"));
        symbols.add(new MathOperator("black hourglass", 0x29d7, "⧗", "Sm", 0, "\\blackhourglass"));
        symbols.add(new MathOperator("left wiggly fence", 0x29d8, "⧘", "Ps", 0, "\\lvzigzag"));
        symbols.add(new MathOperator("right wiggly fence", 0x29d9, "⧙", "Pe", 0, "\\rvzigzag"));
        symbols.add(new MathOperator("left double wiggly fence", 0x29da, "⧚", "Ps", 0, "\\Lvzigzag"));
        symbols.add(new MathOperator("right double wiggly fence", 0x29db, "⧛", "Pe", 0, "\\Rvzigzag"));
        symbols.add(new MathOperator("incomplete infinity", 0x29dc, "⧜", "Sm", 0, "\\iinfin"));
        symbols.add(new MathOperator("tie over infinity", 0x29dd, "⧝", "Sm", 0, "\\tieinfty"));
        symbols.add(new MathOperator("infinity negated with vertical bar", 0x29de, "⧞", "Sm", 0, "\\nvinfty"));
        symbols.add(new MathOperator("double-ended multimap", 0x29df, "⧟", "Sm", 0, "\\dualmap"));
        symbols.add(new MathOperator("square with contoured outline", 0x29e0, "⧠", "Sm", 0, "\\laplac"));
        symbols.add(new MathOperator("increases as", 0x29e1, "⧡", "Sm", 0, "\\lrtriangleeq"));
        symbols.add(new MathOperator("shuffle product", 0x29e2, "⧢", "Sm", 0, "\\shuffle"));
        symbols.add(new MathOperator("equals sign and slanted parallel", 0x29e3, "⧣", "Sm", 0, "\\eparsl"));
        symbols.add(new MathOperator("equals sign and slanted parallel with tilde above", 0x29e4, "⧤", "Sm", 0, "\\smeparsl"));
        symbols.add(new MathOperator("identical to and slanted parallel", 0x29e5, "⧥", "Sm", 0, "\\eqvparsl"));
        symbols.add(new MathOperator("gleich stark", 0x29e6, "⧦", "Sm", 0, "\\gleichstark"));
        symbols.add(new MathOperator("thermodynamic", 0x29e7, "⧧", "Sm", 0, "\\thermod"));
        symbols.add(new MathOperator("down-pointing triangle with left half black", 0x29e8, "⧨", "Sm", 0, "\\downtriangleleftblack"));
        symbols.add(new MathOperator("down-pointing triangle with right half black", 0x29e9, "⧩", "Sm", 0, "\\downtrianglerightblack"));
        symbols.add(new MathOperator("black diamond with down arrow", 0x29ea, "⧪", "Sm", 0, "\\blackdiamonddownarrow"));
        symbols.add(new MathOperator("black lozenge", 0x29eb, "⧫", "Sm", 0, "\\mdlgblklozenge"));
        symbols.add(new MathOperator("white circle with down arrow", 0x29ec, "⧬", "Sm", 0, "\\circledownarrow"));
        symbols.add(new MathOperator("black circle with down arrow", 0x29ed, "⧭", "Sm", 0, "\\blackcircledownarrow"));
        symbols.add(new MathOperator("error-barred white square", 0x29ee, "⧮", "Sm", 0, "\\errbarsquare"));
        symbols.add(new MathOperator("error-barred black square", 0x29ef, "⧯", "Sm", 0, "\\errbarblacksquare"));
        symbols.add(new MathOperator("error-barred white diamond", 0x29f0, "⧰", "Sm", 0, "\\errbardiamond"));
        symbols.add(new MathOperator("error-barred black diamond", 0x29f1, "⧱", "Sm", 0, "\\errbarblackdiamond"));
        symbols.add(new MathOperator("error-barred white circle", 0x29f2, "⧲", "Sm", 0, "\\errbarcircle"));
        symbols.add(new MathOperator("error-barred black circle", 0x29f3, "⧳", "Sm", 0, "\\errbarblackcircle"));
        symbols.add(new MathOperator("rule-delayed", 0x29f4, "⧴", "Sm", 0, "\\ruledelayed"));
        symbols.add(new MathOperator("reverse solidus operator", 0x29f5, "⧵", "Sm", 0, "\\setminus"));
        symbols.add(new MathOperator("solidus with overbar", 0x29f6, "⧶", "Sm", 0, "\\dsol"));
        symbols.add(new MathOperator("reverse solidus with horizontal stroke", 0x29f7, "⧷", "Sm", 0, "\\rsolbar"));
        symbols.add(new MathOperator("big solidus", 0x29f8, "⧸", "Sm", 0, "\\xsol"));
        symbols.add(new MathOperator("big reverse solidus", 0x29f9, "⧹", "Sm", 0, "\\xbsol"));
        symbols.add(new MathOperator("double plus", 0x29fa, "⧺", "Sm", 0, "\\doubleplus"));
        symbols.add(new MathOperator("triple plus", 0x29fb, "⧻", "Sm", 0, "\\tripleplus"));
        symbols.add(new MathOperator("left-pointing curved angle bracket", 0x29fc, "⧼", "Ps", 0, "\\lcurvyangle"));
        symbols.add(new MathOperator("right-pointing curved angle bracket", 0x29fd, "⧽", "Pe", 0, "\\rcurvyangle"));
        symbols.add(new MathOperator("tiny", 0x29fe, "⧾", "Sm", 0, "\\tplus"));
        symbols.add(new MathOperator("miny", 0x29ff, "⧿", "Sm", 0, "\\tminus"));
        symbols.add(new MathOperator("n-ary circled dot operator", 0x2a00, "⨀", "Sm", 0, "\\bigodot"));
        symbols.add(new MathOperator("n-ary circled plus operator", 0x2a01, "⨁", "Sm", 0, "\\bigoplus"));
        symbols.add(new MathOperator("n-ary circled times operator", 0x2a02, "⨂", "Sm", 0, "\\bigotimes"));
        symbols.add(new MathOperator("n-ary union operator with dot", 0x2a03, "⨃", "Sm", 0, "\\bigcupdot"));
        symbols.add(new MathOperator("n-ary union operator with plus", 0x2a04, "⨄", "Sm", 0, "\\biguplus"));
        symbols.add(new MathOperator("n-ary square intersection operator", 0x2a05, "⨅", "Sm", 0, "\\bigsqcap"));
        symbols.add(new MathOperator("n-ary square union operator", 0x2a06, "⨆", "Sm", 0, "\\bigsqcup"));
        symbols.add(new MathOperator("two logical and operator", 0x2a07, "⨇", "Sm", 0, "\\conjquant"));
        symbols.add(new MathOperator("two logical or operator", 0x2a08, "⨈", "Sm", 0, "\\disjquant"));
        symbols.add(new MathOperator("n-ary times operator", 0x2a09, "⨉", "Sm", 0, "\\bigtimes"));
        symbols.add(new MathOperator("modulo two sum", 0x2a0a, "⨊", "Sm", 0, "\\modtwosum"));
        symbols.add(new MathOperator("summation with integral", 0x2a0b, "⨋", "Sm", 0, "\\sumint"));
        symbols.add(new MathOperator("quadruple integral operator", 0x2a0c, "⨌", "Sm", 0, "\\iiiint"));
        symbols.add(new MathOperator("finite part integral", 0x2a0d, "⨍", "Sm", 0, "\\intbar"));
        symbols.add(new MathOperator("integral with double stroke", 0x2a0e, "⨎", "Sm", 0, "\\intBar"));
        symbols.add(new MathOperator("integral average with slash", 0x2a0f, "⨏", "Sm", 0, "\\fint"));
        symbols.add(new MathOperator("circulation function", 0x2a10, "⨐", "Sm", 0, "\\cirfnint"));
        symbols.add(new MathOperator("anticlockwise integration", 0x2a11, "⨑", "Sm", 0, "\\awint"));
        symbols.add(new MathOperator("line integration with rectangular path around pole", 0x2a12, "⨒", "Sm", 0, "\\rppolint"));
        symbols.add(new MathOperator("line integration with semicircular path around pole", 0x2a13, "⨓", "Sm", 0, "\\scpolint"));
        symbols.add(new MathOperator("line integration not including the pole", 0x2a14, "⨔", "Sm", 0, "\\npolint"));
        symbols.add(new MathOperator("integral around a point operator", 0x2a15, "⨕", "Sm", 0, "\\pointint"));
        symbols.add(new MathOperator("quaternion integral operator", 0x2a16, "⨖", "Sm", 0, "\\sqint"));
        symbols.add(new MathOperator("integral with leftwards arrow with hook", 0x2a17, "⨗", "Sm", 0, "\\intlarhk"));
        symbols.add(new MathOperator("integral with times sign", 0x2a18, "⨘", "Sm", 0, "\\intx"));
        symbols.add(new MathOperator("integral with intersection", 0x2a19, "⨙", "Sm", 0, "\\intcap"));
        symbols.add(new MathOperator("integral with union", 0x2a1a, "⨚", "Sm", 0, "\\intcup"));
        symbols.add(new MathOperator("integral with overbar", 0x2a1b, "⨛", "Sm", 0, "\\upint"));
        symbols.add(new MathOperator("integral with underbar", 0x2a1c, "⨜", "Sm", 0, "\\lowint"));
        symbols.add(new MathOperator("join", 0x2a1d, "⨝", "Sm", 0, "\\Join"));
        symbols.add(new MathOperator("large left triangle operator", 0x2a1e, "⨞", "Sm", 0, "\\bigtriangleleft"));
        symbols.add(new MathOperator("z notation schema composition", 0x2a1f, "⨟", "Sm", 0, "\\zcmp"));
        symbols.add(new MathOperator("z notation schema piping", 0x2a20, "⨠", "Sm", 0, "\\zpipe"));
        symbols.add(new MathOperator("z notation schema projection", 0x2a21, "⨡", "Sm", 0, "\\zproject"));
        symbols.add(new MathOperator("plus sign with circle above", 0x2a22, "⨢", "Sm", 0, "\\ringplus"));
        symbols.add(new MathOperator("plus sign with circumflex accent above", 0x2a23, "⨣", "Sm", 0, "\\plushat"));
        symbols.add(new MathOperator("plus sign with tilde above", 0x2a24, "⨤", "Sm", 0, "\\simplus"));
        symbols.add(new MathOperator("plus sign with dot below", 0x2a25, "⨥", "Sm", 0, "\\plusdot"));
        symbols.add(new MathOperator("plus sign with tilde below", 0x2a26, "⨦", "Sm", 0, "\\plussim"));
        symbols.add(new MathOperator("_plus sign with two", 0x2a27, "⨧", "Sm", 0, "\\plussubtwo"));
        symbols.add(new MathOperator("plus sign with black triangle", 0x2a28, "⨨", "Sm", 0, "\\plustrif"));
        symbols.add(new MathOperator("minus sign with comma above", 0x2a29, "⨩", "Sm", 0, "\\commaminus"));
        symbols.add(new MathOperator("minus sign with dot below", 0x2a2a, "⨪", "Sm", 0, "\\minusdot"));
        symbols.add(new MathOperator("minus sign with falling dots", 0x2a2b, "⨫", "Sm", 0, "\\minusfdots"));
        symbols.add(new MathOperator("minus sign with rising dots", 0x2a2c, "⨬", "Sm", 0, "\\minusrdots"));
        symbols.add(new MathOperator("plus sign in left half circle", 0x2a2d, "⨭", "Sm", 0, "\\opluslhrim"));
        symbols.add(new MathOperator("plus sign in right half circle", 0x2a2e, "⨮", "Sm", 0, "\\oplusrhrim"));
        symbols.add(new MathOperator("vector or cross product", 0x2a2f, "⨯", "Sm", 0, "\\vectimes"));
        symbols.add(new MathOperator("multiplication sign with dot above", 0x2a30, "⨰", "Sm", 0, "\\dottimes"));
        symbols.add(new MathOperator("multiplication sign with underbar", 0x2a31, "⨱", "Sm", 0, "\\timesbar"));
        symbols.add(new MathOperator("semidirect product with bottom closed", 0x2a32, "⨲", "Sm", 0, "\\btimes"));
        symbols.add(new MathOperator("smash product", 0x2a33, "⨳", "Sm", 0, "\\smashtimes"));
        symbols.add(new MathOperator("multiplication sign in left half circle", 0x2a34, "⨴", "Sm", 0, "\\otimeslhrim"));
        symbols.add(new MathOperator("multiplication sign in right half circle", 0x2a35, "⨵", "Sm", 0, "\\otimesrhrim"));
        symbols.add(new MathOperator("circled multiplication sign with circumflex accent", 0x2a36, "⨶", "Sm", 0, "\\otimeshat"));
        symbols.add(new MathOperator("multiplication sign in double circle", 0x2a37, "⨷", "Sm", 0, "\\Otimes"));
        symbols.add(new MathOperator("circled division sign", 0x2a38, "⨸", "Sm", 0, "\\odiv"));
        symbols.add(new MathOperator("plus sign in triangle", 0x2a39, "⨹", "Sm", 0, "\\triangleplus"));
        symbols.add(new MathOperator("minus sign in triangle", 0x2a3a, "⨺", "Sm", 0, "\\triangleminus"));
        symbols.add(new MathOperator("multiplication sign in triangle", 0x2a3b, "⨻", "Sm", 0, "\\triangletimes"));
        symbols.add(new MathOperator("interior product", 0x2a3c, "⨼", "Sm", 0, "\\intprod"));
        symbols.add(new MathOperator("righthand interior product", 0x2a3d, "⨽", "Sm", 0, "\\intprodr"));
        symbols.add(new MathOperator("z notation relational composition", 0x2a3e, "⨾", "Sm", 0, "\\fcmp"));
        symbols.add(new MathOperator("amalgamation or coproduct", 0x2a3f, "⨿", "Sm", 0, "\\amalg"));
        symbols.add(new MathOperator("intersection with dot", 0x2a40, "⩀", "Sm", 0, "\\capdot"));
        symbols.add(new MathOperator("union with minus sign", 0x2a41, "⩁", "Sm", 0, "\\uminus"));
        symbols.add(new MathOperator("union with overbar", 0x2a42, "⩂", "Sm", 0, "\\barcup"));
        symbols.add(new MathOperator("intersection with overbar", 0x2a43, "⩃", "Sm", 0, "\\barcap"));
        symbols.add(new MathOperator("intersection with logical and", 0x2a44, "⩄", "Sm", 0, "\\capwedge"));
        symbols.add(new MathOperator("union with logical or", 0x2a45, "⩅", "Sm", 0, "\\cupvee"));
        symbols.add(new MathOperator("union above intersection", 0x2a46, "⩆", "Sm", 0, "\\cupovercap"));
        symbols.add(new MathOperator("intersection above union", 0x2a47, "⩇", "Sm", 0, "\\capovercup"));
        symbols.add(new MathOperator("union above bar above intersection", 0x2a48, "⩈", "Sm", 0, "\\cupbarcap"));
        symbols.add(new MathOperator("intersection above bar above union", 0x2a49, "⩉", "Sm", 0, "\\capbarcup"));
        symbols.add(new MathOperator("union beside and joined with union", 0x2a4a, "⩊", "Sm", 0, "\\twocups"));
        symbols.add(new MathOperator("intersection beside and joined with intersection", 0x2a4b, "⩋", "Sm", 0, "\\twocaps"));
        symbols.add(new MathOperator("closed union with serifs", 0x2a4c, "⩌", "Sm", 0, "\\closedvarcup"));
        symbols.add(new MathOperator("closed intersection with serifs", 0x2a4d, "⩍", "Sm", 0, "\\closedvarcap"));
        symbols.add(new MathOperator("double square intersection", 0x2a4e, "⩎", "Sm", 0, "\\Sqcap"));
        symbols.add(new MathOperator("double square union", 0x2a4f, "⩏", "Sm", 0, "\\Sqcup"));
        symbols.add(new MathOperator("closed union with serifs and smash product", 0x2a50, "⩐", "Sm", 0, "\\closedvarcupsmashprod"));
        symbols.add(new MathOperator("logical and with dot above", 0x2a51, "⩑", "Sm", 0, "\\wedgeodot"));
        symbols.add(new MathOperator("logical or with dot above", 0x2a52, "⩒", "Sm", 0, "\\veeodot"));
        symbols.add(new MathOperator("double logical and", 0x2a53, "⩓", "Sm", 0, "\\Wedge"));
        symbols.add(new MathOperator("double logical or", 0x2a54, "⩔", "Sm", 0, "\\Vee"));
        symbols.add(new MathOperator("two intersecting logical and", 0x2a55, "⩕", "Sm", 0, "\\wedgeonwedge"));
        symbols.add(new MathOperator("two intersecting logical or", 0x2a56, "⩖", "Sm", 0, "\\veeonvee"));
        symbols.add(new MathOperator("sloping large or", 0x2a57, "⩗", "Sm", 0, "\\bigslopedvee"));
        symbols.add(new MathOperator("sloping large and", 0x2a58, "⩘", "Sm", 0, "\\bigslopedwedge"));
        symbols.add(new MathOperator("logical or overlapping logical and", 0x2a59, "⩙", "Sm", 0, "\\veeonwedge"));
        symbols.add(new MathOperator("logical and with middle stem", 0x2a5a, "⩚", "Sm", 0, "\\wedgemidvert"));
        symbols.add(new MathOperator("logical or with middle stem", 0x2a5b, "⩛", "Sm", 0, "\\veemidvert"));
        symbols.add(new MathOperator("logical and with horizontal dash", 0x2a5c, "⩜", "Sm", 0, "\\midbarwedge"));
        symbols.add(new MathOperator("logical or with horizontal dash", 0x2a5d, "⩝", "Sm", 0, "\\midbarvee"));
        symbols.add(new MathOperator("logical and with double overbar", 0x2a5e, "⩞", "Sm", 0, "\\doublebarwedge"));
        symbols.add(new MathOperator("logical and with underbar", 0x2a5f, "⩟", "Sm", 0, "\\wedgebar"));
        symbols.add(new MathOperator("logical and with double underbar", 0x2a60, "⩠", "Sm", 0, "\\wedgedoublebar"));
        symbols.add(new MathOperator("vee with underbar", 0x2a61, "⩡", "Sm", 0, "\\varveebar"));
        symbols.add(new MathOperator("logical or with double overbar", 0x2a62, "⩢", "Sm", 0, "\\doublebarvee"));
        symbols.add(new MathOperator("logical or with double underbar", 0x2a63, "⩣", "Sm", 0, "\\veedoublebar"));
        symbols.add(new MathOperator("z notation domain antirestriction", 0x2a64, "⩤", "Sm", 0, "\\dsub"));
        symbols.add(new MathOperator("z notation range antirestriction", 0x2a65, "⩥", "Sm", 0, "\\rsub"));
        symbols.add(new MathOperator("equals sign with dot below", 0x2a66, "⩦", "Sm", 0, "\\eqdot"));
        symbols.add(new MathOperator("identical with dot above", 0x2a67, "⩧", "Sm", 0, "\\dotequiv"));
        symbols.add(new MathOperator("triple horizontal bar with double vertical stroke", 0x2a68, "⩨", "Sm", 0, "\\equivVert"));
        symbols.add(new MathOperator("triple horizontal bar with triple vertical stroke", 0x2a69, "⩩", "Sm", 0, "\\equivVvert"));
        symbols.add(new MathOperator("tilde operator with dot above", 0x2a6a, "⩪", "Sm", 0, "\\dotsim"));
        symbols.add(new MathOperator("tilde operator with rising dots", 0x2a6b, "⩫", "Sm", 0, "\\simrdots"));
        symbols.add(new MathOperator("similar minus similar", 0x2a6c, "⩬", "Sm", 0, "\\simminussim"));
        symbols.add(new MathOperator("congruent with dot above", 0x2a6d, "⩭", "Sm", 0, "\\congdot"));
        symbols.add(new MathOperator("equals with asterisk", 0x2a6e, "⩮", "Sm", 0, "\\asteq"));
        symbols.add(new MathOperator("almost equal to with circumflex accent", 0x2a6f, "⩯", "Sm", 0, "\\hatapprox"));
        symbols.add(new MathOperator("approximately equal or equal to", 0x2a70, "⩰", "Sm", 0, "\\approxeqq"));
        symbols.add(new MathOperator("equals sign above plus sign", 0x2a71, "⩱", "Sm", 0, "\\eqqplus"));
        symbols.add(new MathOperator("plus sign above equals sign", 0x2a72, "⩲", "Sm", 0, "\\pluseqq"));
        symbols.add(new MathOperator("equals sign above tilde operator", 0x2a73, "⩳", "Sm", 0, "\\eqqsim"));
        symbols.add(new MathOperator("double colon equal", 0x2a74, "⩴", "Sm", 0, "\\Coloneq"));
        symbols.add(new MathOperator("two consecutive equals signs", 0x2a75, "⩵", "Sm", 0, "\\eqeq"));
        symbols.add(new MathOperator("three consecutive equals signs", 0x2a76, "⩶", "Sm", 0, "\\eqeqeq"));
        symbols.add(new MathOperator("equals sign with two dots above and two dots below", 0x2a77, "⩷", "Sm", 0, "\\ddotseq"));
        symbols.add(new MathOperator("equivalent with four dots above", 0x2a78, "⩸", "Sm", 0, "\\equivDD"));
        symbols.add(new MathOperator("less-than with circle inside", 0x2a79, "⩹", "Sm", 0, "\\ltcir"));
        symbols.add(new MathOperator("greater-than with circle inside", 0x2a7a, "⩺", "Sm", 0, "\\gtcir"));
        symbols.add(new MathOperator("less-than with question mark above", 0x2a7b, "⩻", "Sm", 0, "\\ltquest"));
        symbols.add(new MathOperator("greater-than with question mark above", 0x2a7c, "⩼", "Sm", 0, "\\gtquest"));
        symbols.add(new MathOperator("less-than or slanted equal to", 0x2a7d, "⩽", "Sm", 0, "\\leqslant"));
        symbols.add(new MathOperator("greater-than or slanted equal to", 0x2a7e, "⩾", "Sm", 0, "\\geqslant"));
        symbols.add(new MathOperator("less-than or slanted equal to with dot inside", 0x2a7f, "⩿", "Sm", 0, "\\lesdot"));
        symbols.add(new MathOperator("greater-than or slanted equal to with dot inside", 0x2a80, "⪀", "Sm", 0, "\\gesdot"));
        symbols.add(new MathOperator("less-than or slanted equal to with dot above", 0x2a81, "⪁", "Sm", 0, "\\lesdoto"));
        symbols.add(new MathOperator("greater-than or slanted equal to with dot above", 0x2a82, "⪂", "Sm", 0, "\\gesdoto"));
        symbols.add(new MathOperator("less-than or slanted equal to with dot above right", 0x2a83, "⪃", "Sm", 0, "\\lesdotor"));
        symbols.add(new MathOperator("greater-than or slanted equal to with dot above left", 0x2a84, "⪄", "Sm", 0, "\\gesdotol"));
        symbols.add(new MathOperator("less-than or approximate", 0x2a85, "⪅", "Sm", 0, "\\lessapprox"));
        symbols.add(new MathOperator("greater-than or approximate", 0x2a86, "⪆", "Sm", 0, "\\gtrapprox"));
        symbols.add(new MathOperator("less-than and single-line not equal to", 0x2a87, "⪇", "Sm", 0, "\\lneq"));
        symbols.add(new MathOperator("greater-than and single-line not equal to", 0x2a88, "⪈", "Sm", 0, "\\gneq"));
        symbols.add(new MathOperator("less-than and not approximate", 0x2a89, "⪉", "Sm", 0, "\\lnapprox"));
        symbols.add(new MathOperator("greater-than and not approximate", 0x2a8a, "⪊", "Sm", 0, "\\gnapprox"));
        symbols.add(new MathOperator("less-than above double-line equal above greater-than", 0x2a8b, "⪋", "Sm", 0, "\\lesseqqgtr"));
        symbols.add(new MathOperator("greater-than above double-line equal above less-than", 0x2a8c, "⪌", "Sm", 0, "\\gtreqqless"));
        symbols.add(new MathOperator("less-than above similar or equal", 0x2a8d, "⪍", "Sm", 0, "\\lsime"));
        symbols.add(new MathOperator("greater-than above similar or equal", 0x2a8e, "⪎", "Sm", 0, "\\gsime"));
        symbols.add(new MathOperator("less-than above similar above greater-than", 0x2a8f, "⪏", "Sm", 0, "\\lsimg"));
        symbols.add(new MathOperator("greater-than above similar above less-than", 0x2a90, "⪐", "Sm", 0, "\\gsiml"));
        symbols.add(new MathOperator("less-than above greater-than above double-line equal", 0x2a91, "⪑", "Sm", 0, "\\lgE"));
        symbols.add(new MathOperator("greater-than above less-than above double-line equal", 0x2a92, "⪒", "Sm", 0, "\\glE"));
        symbols.add(new MathOperator("less-than above slanted equal above greater-than above slanted equal", 0x2a93, "⪓", "Sm", 0, "\\lesges"));
        symbols.add(new MathOperator("greater-than above slanted equal above less-than above slanted equal", 0x2a94, "⪔", "Sm", 0, "\\gesles"));
        symbols.add(new MathOperator("slanted equal to or less-than", 0x2a95, "⪕", "Sm", 0, "\\eqslantless"));
        symbols.add(new MathOperator("slanted equal to or greater-than", 0x2a96, "⪖", "Sm", 0, "\\eqslantgtr"));
        symbols.add(new MathOperator("slanted equal to or less-than with dot inside", 0x2a97, "⪗", "Sm", 0, "\\elsdot"));
        symbols.add(new MathOperator("slanted equal to or greater-than with dot inside", 0x2a98, "⪘", "Sm", 0, "\\egsdot"));
        symbols.add(new MathOperator("double-line equal to or less-than", 0x2a99, "⪙", "Sm", 0, "\\eqqless"));
        symbols.add(new MathOperator("double-line equal to or greater-than", 0x2a9a, "⪚", "Sm", 0, "\\eqqgtr"));
        symbols.add(new MathOperator("double-line slanted equal to or less-than", 0x2a9b, "⪛", "Sm", 0, "\\eqqslantless"));
        symbols.add(new MathOperator("double-line slanted equal to or greater-than", 0x2a9c, "⪜", "Sm", 0, "\\eqqslantgtr"));
        symbols.add(new MathOperator("similar or less-than", 0x2a9d, "⪝", "Sm", 0, "\\simless"));
        symbols.add(new MathOperator("similar or greater-than", 0x2a9e, "⪞", "Sm", 0, "\\simgtr"));
        symbols.add(new MathOperator("similar above less-than above equals sign", 0x2a9f, "⪟", "Sm", 0, "\\simlE"));
        symbols.add(new MathOperator("similar above greater-than above equals sign", 0x2aa0, "⪠", "Sm", 0, "\\simgE"));
        symbols.add(new MathOperator("double nested less-than", 0x2aa1, "⪡", "Sm", 0, "\\Lt"));
        symbols.add(new MathOperator("double nested greater-than", 0x2aa2, "⪢", "Sm", 0, "\\Gt"));
        symbols.add(new MathOperator("double nested less-than with underbar", 0x2aa3, "⪣", "Sm", 0, "\\partialmeetcontraction"));
        symbols.add(new MathOperator("greater-than overlapping less-than", 0x2aa4, "⪤", "Sm", 0, "\\glj"));
        symbols.add(new MathOperator("greater-than beside less-than", 0x2aa5, "⪥", "Sm", 0, "\\gla"));
        symbols.add(new MathOperator("less-than closed by curve", 0x2aa6, "⪦", "Sm", 0, "\\ltcc"));
        symbols.add(new MathOperator("greater-than closed by curve", 0x2aa7, "⪧", "Sm", 0, "\\gtcc"));
        symbols.add(new MathOperator("less-than closed by curve above slanted equal", 0x2aa8, "⪨", "Sm", 0, "\\lescc"));
        symbols.add(new MathOperator("greater-than closed by curve above slanted equal", 0x2aa9, "⪩", "Sm", 0, "\\gescc"));
        symbols.add(new MathOperator("smaller than", 0x2aaa, "⪪", "Sm", 0, "\\smt"));
        symbols.add(new MathOperator("larger than", 0x2aab, "⪫", "Sm", 0, "\\lat"));
        symbols.add(new MathOperator("smaller than or equal to", 0x2aac, "⪬", "Sm", 0, "\\smte"));
        symbols.add(new MathOperator("larger than or equal to", 0x2aad, "⪭", "Sm", 0, "\\late"));
        symbols.add(new MathOperator("equals sign with bumpy above", 0x2aae, "⪮", "Sm", 0, "\\bumpeqq"));
        symbols.add(new MathOperator("precedes above single-line equals sign", 0x2aaf, "⪯", "Sm", 0, "\\preceq"));
        symbols.add(new MathOperator("succeeds above single-line equals sign", 0x2ab0, "⪰", "Sm", 0, "\\succeq"));
        symbols.add(new MathOperator("precedes above single-line not equal to", 0x2ab1, "⪱", "Sm", 0, "\\precneq"));
        symbols.add(new MathOperator("succeeds above single-line not equal to", 0x2ab2, "⪲", "Sm", 0, "\\succneq"));
        symbols.add(new MathOperator("precedes above equals sign", 0x2ab3, "⪳", "Sm", 0, "\\preceqq"));
        symbols.add(new MathOperator("succeeds above equals sign", 0x2ab4, "⪴", "Sm", 0, "\\succeqq"));
        symbols.add(new MathOperator("precedes above not equal to", 0x2ab5, "⪵", "Sm", 0, "\\precneqq"));
        symbols.add(new MathOperator("succeeds above not equal to", 0x2ab6, "⪶", "Sm", 0, "\\succneqq"));
        symbols.add(new MathOperator("precedes above almost equal to", 0x2ab7, "⪷", "Sm", 0, "\\precapprox"));
        symbols.add(new MathOperator("succeeds above almost equal to", 0x2ab8, "⪸", "Sm", 0, "\\succapprox"));
        symbols.add(new MathOperator("precedes above not almost equal to", 0x2ab9, "⪹", "Sm", 0, "\\precnapprox"));
        symbols.add(new MathOperator("succeeds above not almost equal to", 0x2aba, "⪺", "Sm", 0, "\\succnapprox"));
        symbols.add(new MathOperator("double precedes", 0x2abb, "⪻", "Sm", 0, "\\Prec"));
        symbols.add(new MathOperator("double succeeds", 0x2abc, "⪼", "Sm", 0, "\\Succ"));
        symbols.add(new MathOperator("subset with dot", 0x2abd, "⪽", "Sm", 0, "\\subsetdot"));
        symbols.add(new MathOperator("superset with dot", 0x2abe, "⪾", "Sm", 0, "\\supsetdot"));
        symbols.add(new MathOperator("subset with plus sign below", 0x2abf, "⪿", "Sm", 0, "\\subsetplus"));
        symbols.add(new MathOperator("superset with plus sign below", 0x2ac0, "⫀", "Sm", 0, "\\supsetplus"));
        symbols.add(new MathOperator("subset with multiplication sign below", 0x2ac1, "⫁", "Sm", 0, "\\submult"));
        symbols.add(new MathOperator("superset with multiplication sign below", 0x2ac2, "⫂", "Sm", 0, "\\supmult"));
        symbols.add(new MathOperator("subset of or equal to with dot above", 0x2ac3, "⫃", "Sm", 0, "\\subedot"));
        symbols.add(new MathOperator("superset of or equal to with dot above", 0x2ac4, "⫄", "Sm", 0, "\\supedot"));
        symbols.add(new MathOperator("subset of above equals sign", 0x2ac5, "⫅", "Sm", 0, "\\subseteqq"));
        symbols.add(new MathOperator("superset of above equals sign", 0x2ac6, "⫆", "Sm", 0, "\\supseteqq"));
        symbols.add(new MathOperator("subset of above tilde operator", 0x2ac7, "⫇", "Sm", 0, "\\subsim"));
        symbols.add(new MathOperator("superset of above tilde operator", 0x2ac8, "⫈", "Sm", 0, "\\supsim"));
        symbols.add(new MathOperator("subset of above almost equal to", 0x2ac9, "⫉", "Sm", 0, "\\subsetapprox"));
        symbols.add(new MathOperator("superset of above almost equal to", 0x2aca, "⫊", "Sm", 0, "\\supsetapprox"));
        symbols.add(new MathOperator("subset of above not equal to", 0x2acb, "⫋", "Sm", 0, "\\subsetneqq"));
        symbols.add(new MathOperator("superset of above not equal to", 0x2acc, "⫌", "Sm", 0, "\\supsetneqq"));
        symbols.add(new MathOperator("square left open box operator", 0x2acd, "⫍", "Sm", 0, "\\lsqhook"));
        symbols.add(new MathOperator("square right open box operator", 0x2ace, "⫎", "Sm", 0, "\\rsqhook"));
        symbols.add(new MathOperator("closed subset", 0x2acf, "⫏", "Sm", 0, "\\csub"));
        symbols.add(new MathOperator("closed superset", 0x2ad0, "⫐", "Sm", 0, "\\csup"));
        symbols.add(new MathOperator("closed subset or equal to", 0x2ad1, "⫑", "Sm", 0, "\\csube"));
        symbols.add(new MathOperator("closed superset or equal to", 0x2ad2, "⫒", "Sm", 0, "\\csupe"));
        symbols.add(new MathOperator("subset above superset", 0x2ad3, "⫓", "Sm", 0, "\\subsup"));
        symbols.add(new MathOperator("superset above subset", 0x2ad4, "⫔", "Sm", 0, "\\supsub"));
        symbols.add(new MathOperator("subset above subset", 0x2ad5, "⫕", "Sm", 0, "\\subsub"));
        symbols.add(new MathOperator("superset above superset", 0x2ad6, "⫖", "Sm", 0, "\\supsup"));
        symbols.add(new MathOperator("superset beside subset", 0x2ad7, "⫗", "Sm", 0, "\\suphsub"));
        symbols.add(new MathOperator("superset beside and joined by dash with subset", 0x2ad8, "⫘", "Sm", 0, "\\supdsub"));
        symbols.add(new MathOperator("element of opening downwards", 0x2ad9, "⫙", "Sm", 0, "\\forkv"));
        symbols.add(new MathOperator("pitchfork with tee top", 0x2ada, "⫚", "Sm", 0, "\\topfork"));
        symbols.add(new MathOperator("transversal intersection", 0x2adb, "⫛", "Sm", 0, "\\mlcp"));
        symbols.add(new MathOperator("forking", 0x2adc, "⫝̸", "Sm", 0, "\\forks"));
        symbols.add(new MathOperator("nonforking", 0x2add, "⫝", "Sm", 0, "\\forksnot"));
        symbols.add(new MathOperator("short left tack", 0x2ade, "⫞", "Sm", 0, "\\shortlefttack"));
        symbols.add(new MathOperator("short down tack", 0x2adf, "⫟", "Sm", 0, "\\shortdowntack"));
        symbols.add(new MathOperator("short up tack", 0x2ae0, "⫠", "Sm", 0, "\\shortuptack"));
        symbols.add(new MathOperator("perpendicular with s", 0x2ae1, "⫡", "Sm", 0, "\\perps"));
        symbols.add(new MathOperator("vertical bar triple right turnstile", 0x2ae2, "⫢", "Sm", 0, "\\vDdash"));
        symbols.add(new MathOperator("double vertical bar left turnstile", 0x2ae3, "⫣", "Sm", 0, "\\dashV"));
        symbols.add(new MathOperator("vertical bar double left turnstile", 0x2ae4, "⫤", "Sm", 0, "\\Dashv"));
        symbols.add(new MathOperator("double vertical bar double left turnstile", 0x2ae5, "⫥", "Sm", 0, "\\DashV"));
        symbols.add(new MathOperator("long dash from left member of double vertical", 0x2ae6, "⫦", "Sm", 0, "\\varVdash"));
        symbols.add(new MathOperator("short down tack with overbar", 0x2ae7, "⫧", "Sm", 0, "\\Barv"));
        symbols.add(new MathOperator("short up tack with underbar", 0x2ae8, "⫨", "Sm", 0, "\\vBar"));
        symbols.add(new MathOperator("short up tack above short down tack", 0x2ae9, "⫩", "Sm", 0, "\\vBarv"));
        symbols.add(new MathOperator("double down tack", 0x2aea, "⫪", "Sm", 0, "\\barV"));
        symbols.add(new MathOperator("double up tack", 0x2aeb, "⫫", "Sm", 0, "\\Vbar"));
        symbols.add(new MathOperator("double stroke not sign", 0x2aec, "⫬", "Sm", 0, "\\Not"));
        symbols.add(new MathOperator("reversed double stroke not sign", 0x2aed, "⫭", "Sm", 0, "\\bNot"));
        symbols.add(new MathOperator("does not divide with reversed negation slash", 0x2aee, "⫮", "Sm", 0, "\\revnmid"));
        symbols.add(new MathOperator("vertical line with circle above", 0x2aef, "⫯", "Sm", 0, "\\cirmid"));
        symbols.add(new MathOperator("vertical line with circle below", 0x2af0, "⫰", "Sm", 0, "\\midcir"));
        symbols.add(new MathOperator("down tack with circle below", 0x2af1, "⫱", "Sm", 0, "\\topcir"));
        symbols.add(new MathOperator("parallel with horizontal stroke", 0x2af2, "⫲", "Sm", 0, "\\nhpar"));
        symbols.add(new MathOperator("parallel with tilde operator", 0x2af3, "⫳", "Sm", 0, "\\parsim"));
        symbols.add(new MathOperator("triple vertical bar binary relation", 0x2af4, "⫴", "Sm", 0, "\\interleave"));
        symbols.add(new MathOperator("triple vertical bar with horizontal stroke", 0x2af5, "⫵", "Sm", 0, "\\nhVvert"));
        symbols.add(new MathOperator("triple colon operator", 0x2af6, "⫶", "Sm", 0, "\\threedotcolon"));
        symbols.add(new MathOperator("triple nested less-than", 0x2af7, "⫷", "Sm", 0, "\\lllnest"));
        symbols.add(new MathOperator("triple nested greater-than", 0x2af8, "⫸", "Sm", 0, "\\gggnest"));
        symbols.add(new MathOperator("double-line slanted less-than or equal to", 0x2af9, "⫹", "Sm", 0, "\\leqqslant"));
        symbols.add(new MathOperator("double-line slanted greater-than or equal to", 0x2afa, "⫺", "Sm", 0, "\\geqqslant"));
        symbols.add(new MathOperator("triple solidus binary relation", 0x2afb, "⫻", "Sm", 0, "\\trslash"));
        symbols.add(new MathOperator("large triple vertical bar operator", 0x2afc, "⫼", "Sm", 0, "\\biginterleave"));
        symbols.add(new MathOperator("double solidus operator", 0x2afd, "⫽", "Sm", 0, "\\sslash"));
        symbols.add(new MathOperator("white vertical bar", 0x2afe, "⫾", "Sm", 0, "\\talloblong"));
        symbols.add(new MathOperator("n-ary white vertical bar", 0x2aff, "⫿", "Sm", 0, "\\bigtalloblong"));
    }
}